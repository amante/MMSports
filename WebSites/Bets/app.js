/* Bets (MMSports-style) */
const STATE_KEYS = { players:'bets_players', cartillas:'bets_cartillas' };
let players = []; let cartillas = [];
const $=(s,r=document)=>r.querySelector(s); const $$=(s,r=document)=>Array.from(r.querySelectorAll(s));
const normalize=s=>(s??'').toString().trim(); const toNumber=v=>{ if(v===null||v===undefined||v==='') return null; const n=Number(String(v).replace(',','.')); return Number.isFinite(n)?n:null; };
const save=()=>{ localStorage.setItem(STATE_KEYS.players, JSON.stringify(players)); localStorage.setItem(STATE_KEYS.cartillas, JSON.stringify(cartillas)); };
const load=()=>{ try{ players=JSON.parse(localStorage.getItem(STATE_KEYS.players)||'[]'); cartillas=JSON.parse(localStorage.getItem(STATE_KEYS.cartillas)||'[]'); }catch(e){ players=[]; cartillas=[]; } };
function toast(msg,type='info'){ const t=$('#toast'); if(!t) return; const c={info:'bg-sky-600',warn:'bg-amber-600',error:'bg-rose-600',ok:'bg-emerald-600'}; t.className='fixed top-3 right-3 max-w-sm z-30'; t.innerHTML=`<div class="text-white ${c[type]||c.info} rounded-xl shadow-lg px-4 py-3">${msg}</div>`; t.classList.remove('hidden'); setTimeout(()=>t.classList.add('hidden'),2200); }
function showWarnings(list){ const p=$('#warnPanel'), ul=$('#warnList'); if(!p||!ul) return; ul.innerHTML=''; list.forEach(w=>{ const li=document.createElement('li'); li.textContent=w; ul.appendChild(li); }); p.classList.remove('hidden'); }
const REQUIRED_CARTILLAS=['cartilla','jugador','estadistica','condicion','objetivo']; const REQUIRED_JUGADORES=['jugador','estadistica','valor'];
function validateHeaders(rows,req){ if(!rows?.length) return ['No se encontraron filas.']; const headers=Object.keys(rows[0]).map(h=>h.toLowerCase().trim()); const missing=req.filter(r=>!headers.includes(r)); return missing.length?[`Faltan columnas: ${missing.join(', ')}`]:[]; }
function coerceHeaders(rows){ return rows.map(r=>{ const o={}; for(const k in r){ const kl=k.toLowerCase().trim().replace('estadística','estadistica').replace('condición','condicion'); o[kl]=r[k]; } return o; }); }
function parseJugadoresRows(rows){ rows=coerceHeaders(rows); const warns=validateHeaders(rows,REQUIRED_JUGADORES); if(warns.length) showWarnings(warns); const out=[]; rows.forEach(r=>{ const jugador=normalize(r['jugador']); const estadistica=normalize(r['estadistica']); const valor=toNumber(r['valor']); if(jugador&&estadistica&&valor!==null) out.push({jugador,estadistica,valor}); }); return out; }
function parseCartillasRows(rows){ rows=coerceHeaders(rows); const warns=validateHeaders(rows,REQUIRED_CARTILLAS); if(warns.length) showWarnings(warns); const byId=new Map(); rows.forEach(r=>{ const cartilla=normalize(r['cartilla']); const jugador=normalize(r['jugador']); const estadistica=normalize(r['estadistica']); const condicion=normalize(r['condicion']).replace(/\s+/g,''); const objetivo=toNumber(r['objetivo']); let actual=r.hasOwnProperty('actual')?toNumber(r['actual']):null; if(!cartilla||!jugador||!estadistica||!condicion||objetivo===null) return; if(!byId.has(cartilla)) byId.set(cartilla,{id:cartilla,nombre:cartilla,lineas:[]}); if(actual===null){ const p=players.find(p=>p.jugador.toLowerCase()===jugador.toLowerCase()&&p.estadistica.toLowerCase()===estadistica.toLowerCase()); if(p) actual=toNumber(p.valor);} let cumple=false, restante=null; if(actual!==null){ if(condicion==='>='){ cumple=actual>=objetivo; restante=Math.max(0,objetivo-actual);} else if(condicion==='<='){ cumple=actual<=objetivo; restante=Math.max(0,actual-objetivo);} } byId.get(cartilla).lineas.push({jugador,estadistica,condicion,objetivo,actual,restante,cumple}); }); return Array.from(byId.values()); }
function parseCSV(text){ const rows=[]; let row=[],field='',q=false; for(let i=0;i<text.length;i++){ const c=text[i]; if(c=='\"'){ if(q&&text[i+1]=='\"'){ field+='\"'; i++; } else q=!q; } else if(c===','&&!q){ row.push(field); field=''; } else if((c==='\n'||c==='\r')&&!q){ if(field!==''||row.length){ row.push(field); rows.push(row); row=[]; field=''; } if(c==='\r'&&text[i+1]==='\n') i++; } else field+=c; } if(field!==''||row.length){ row.push(field); rows.push(row); } if(!rows.length) return []; const headers=rows[0].map(h=>h.trim()); return rows.slice(1).filter(r=>r.some(x=>x.trim()!='')).map(r=>{ const o={}; headers.forEach((h,i)=>o[h]=r[i]??''); return o; }); }
let currentSlide=0, autoTimer=null, autoEnabled=false, autoMs=6000;
function renderPlayersTable(){ const tb=$('#playersTable'); if(!tb) return; tb.innerHTML=''; const q=normalize($('#playerSearch')?.value||'').toLowerCase(); players.filter(p=>!q||p.jugador.toLowerCase().includes(q)).sort((a,b)=>a.jugador.localeCompare(b.jugador)||a.estadistica.localeCompare(b.estadistica)).forEach((p,idx)=>{ const tr=document.createElement('tr'); tr.className='border-t border-slate-100'; tr.innerHTML=`<td class="px-3 py-2">${p.jugador}</td><td class="px-3 py-2">${p.estadistica}</td><td class="px-3 py-2 text-right"><input data-idx="${idx}" type="number" class="w-24 px-2 py-1 border border-slate-300 rounded-lg text-right" value="${p.valor??''}"/></td>`; tb.appendChild(tr); }); $$('input[type="number"]',tb).forEach(inp=>inp.addEventListener('change',()=>{ const i=Number(inp.dataset.idx); const v=toNumber(inp.value); players[i].valor=v; cascadePlayersToCartillas(players[i]); save(); renderAll(); checkWin(); })); }
function cascadePlayersToCartillas(p){ for(const c of cartillas){ for(const l of c.lineas){ if(l.jugador.toLowerCase()===p.jugador.toLowerCase()&&l.estadistica.toLowerCase()===p.estadistica.toLowerCase()){ l.actual=p.valor; if(l.condicion==='>='){ l.cumple=p.valor>=l.objetivo; l.restante=Math.max(0,l.objetivo-p.valor);} else if(l.condicion==='<='){ l.cumple=p.valor<=l.objetivo; l.restante=Math.max(0,p.valor-l.objetivo);} } } } }
function renderCarousel(){ const c=$('#carousel'); if(!c) return; c.innerHTML=''; cartillas.forEach((sl,i)=>{ const allOk=sl.lineas.length>0 && sl.lineas.every(l=>!!l.cumple); const div=document.createElement('div'); div.className='min-w-full px-2'; div.setAttribute('role','group'); div.setAttribute('aria-label',`Cartilla ${i+1}`); div.innerHTML=`<div class="card p-4 border rounded-2xl ${allOk?'border-emerald-300 bg-emerald-50':'border-slate-200 bg-white'} shadow-sm"><div class="flex items-center justify-between mb-2"><h3 class="text-lg font-semibold">Cartilla: ${sl.nombre}</h3><span class="text-xs px-2 py-1 rounded-full ${allOk?'bg-emerald-100 text-emerald-700':'bg-slate-100 text-slate-600'}">${allOk?'Completada':'En progreso'}</span></div><div class="-mx-2 overflow-x-auto"><table class="min-w-full text-sm"><thead class="bg-slate-50"><tr><th class="text-left px-2 py-2">Jugador</th><th class="text-left px-2 py-2">Estadística</th><th class="text-left px-2 py-2">Condición</th><th class="text-right px-2 py-2">Objetivo</th><th class="text-right px-2 py-2">Actual</th><th class="text-right px-2 py-2">Restante</th><th class="text-right px-2 py-2">Estado</th></tr></thead><tbody>${
sl.lineas.map(l=>{ const ok=!!l.cumple; const restante=(l.actual!=null?(l.condicion==='>='?Math.max(0,l.objetivo-l.actual):Math.max(0,l.actual-l.objetivo)):null); return `<tr class="border-t ${ok?'bg-emerald-50/60 border-emerald-200':'border-slate-100'}"><td class="px-2 py-1">${l.jugador}</td><td class="px-2 py-1">${l.estadistica}</td><td class="px-2 py-1">${l.condicion}</td><td class="px-2 py-1 text-right">${l.objetivo??'—'}</td><td class="px-2 py-1 text-right ${ok?'text-emerald-700 font-medium':''}">${l.actual??'—'}</td><td class="px-2 py-1 text-right">${restante!=null?restante:'—'}</td><td class="px-2 py-1 text-right">${ok?'✅':'⏳'}</td></tr>`; }).join('')
}</tbody></table></div></div>`; c.appendChild(div); }); updateTransform(); updateControls(); adjustHeight(); }
function updateTransform(){ const c=$('#carousel'); c.style.transform=`translateX(-${currentSlide*100}%)`; $('#carouselStatus').textContent=cartillas.length?`Mostrando ${currentSlide+1} de ${cartillas.length}`:'Sin cartillas'; }
function updateControls(){ const dots=$('#dots'); if(dots){ dots.innerHTML=''; cartillas.forEach((_,i)=>{ const b=document.createElement('button'); b.className='dot '+(i===currentSlide?'active':''); b.addEventListener('click',()=>{ currentSlide=i; updateTransform(); adjustHeight(); syncGoto(); }); dots.appendChild(b); }); } const sel=$('#gotoSel'); if(sel){ sel.innerHTML='<option value=\"\">—</option>'+cartillas.map((c,i)=>`<option value=\"${i}\" ${i===currentSlide?'selected':''}>${i+1}. ${c.nombre}</option>`).join(''); } const pp=$('#playPause'); if(pp) pp.textContent=autoEnabled?'Pausar':'Reproducir'; }
function syncGoto(){ const sel=$('#gotoSel'); if(sel && sel.value!==String(currentSlide)) sel.value=String(currentSlide); $$('#dots .dot').forEach((d,i)=>d.classList.toggle('active', i===currentSlide)); }
function adjustHeight(){ const wrap=$('#carouselWrap'); const slides=$$('#carousel > div'); if(!wrap||!slides.length) return; const active=slides[currentSlide]; const h=active?.offsetHeight||0; wrap.style.height=h?(h+40)+'px':'auto'; }
function nextSlide(){ if(!cartillas.length) return; currentSlide=(currentSlide+1)%cartillas.length; updateTransform(); syncGoto(); adjustHeight(); }
function prevSlide(){ if(!cartillas.length) return; currentSlide=(currentSlide-1+cartillas.length)%cartillas.length; updateTransform(); syncGoto(); adjustHeight(); }
function startAuto(){ stopAuto(); if(!autoEnabled||!cartillas.length) return; autoTimer=setInterval(nextSlide, autoMs); }
function stopAuto(){ if(autoTimer) clearInterval(autoTimer); autoTimer=null; }
function toggleAuto(){ autoEnabled=!autoEnabled; updateControls(); if(autoEnabled) startAuto(); else stopAuto(); }
function renderSummary(){ const el=$('#summary'); if(!el) return; const total=cartillas.length; const comp=cartillas.filter(c=>c.lineas.length&&c.lineas.every(l=>!!l.cumple)).length; const totL=cartillas.reduce((a,c)=>a+c.lineas.length,0); const okL=cartillas.reduce((a,c)=>a+c.lineas.filter(l=>l.cumple).length,0); el.innerHTML=`<div class="p-4 rounded-2xl bg-white border border-slate-200"><div class="text-xs text-slate-500">Cartillas</div><div class="text-2xl font-semibold">${total}</div></div><div class="p-4 rounded-2xl bg-white border border-slate-200"><div class="text-xs text-slate-500">Completas</div><div class="text-2xl font-semibold">${comp}</div></div><div class="p-4 rounded-2xl bg-white border border-slate-200"><div class="text-xs text-slate-500">Líneas totales</div><div class="text-2xl font-semibold">${totL}</div></div><div class="p-4 rounded-2xl bg-white border border-slate-200"><div class="text-xs text-slate-500">Líneas cumplidas</div><div class="text-2xl font-semibold">${okL}</div></div>`; }
function renderAll(){ renderPlayersTable(); renderCarousel(); renderSummary(); }
function confetti(){ const conf=$('#confetti'); if(!conf) return; conf.innerHTML=''; const emojis=['🎉','✨','🎊','⭐','💫','🏆']; for(let i=0;i<100;i++){ const s=document.createElement('span'); s.textContent=emojis[Math.floor(Math.random()*emojis.length)]; s.style.left=Math.random()*100+'vw'; s.style.animationDelay=(Math.random()*0.8)+'s'; conf.appendChild(s);} setTimeout(()=>conf.innerHTML='',3200); }
function checkWin(){ if(cartillas.length && cartillas.every(c=>c.lineas.length && c.lineas.every(l=>l.cumple))) confetti(); }
async function handleFile(file){ const name=file.name.toLowerCase(); try{ if(name.endsWith('.xlsx')||name.endsWith('.xls')){ const buf=await file.arrayBuffer(); const wb=XLSX.read(buf,{type:'array'}); const sheets=wb.SheetNames; const sC=sheets.find(n=>n.toLowerCase().includes('cartilla')) ?? sheets[0]; const sJ=sheets.find(n=>n.toLowerCase().includes('jugad')) ?? sheets[1]; if(sJ){ const rowsJ=XLSX.utils.sheet_to_json(wb.Sheets[sJ],{defval:''}); players=parseJugadoresRows(rowsJ);} if(sC){ const rowsC=XLSX.utils.sheet_to_json(wb.Sheets[sC],{defval:''}); cartillas=parseCartillasRows(rowsC);} } else if(name.endsWith('.csv')){ const text=await file.text(); const rows=parseCSV(text); if(!rows.length) return toast('CSV vacío','error'); const headers=Object.keys(rows[0]).map(h=>h.toLowerCase()); if(headers.includes('valor')) players=parseJugadoresRows(rows); else if(headers.includes('objetivo')) cartillas=parseCartillasRows(rows); else return toast('CSV no reconocido','warn'); } else { return toast('Formato no soportado','error'); } for(const c of cartillas){ for(const l of c.lineas){ if(l.actual==null){ const p=players.find(p=>p.jugador.toLowerCase()===l.jugador.toLowerCase()&&p.estadistica.toLowerCase()===l.estadistica.toLowerCase()); if(p){ l.actual=toNumber(p.valor); if(l.condicion==='>='){ l.cumple=l.actual>=l.objetivo; l.restante=Math.max(0,l.objetivo-l.actual);} else if(l.condicion==='<='){ l.cumple=l.actual<=l.objetivo; l.restante=Math.max(0,l.actual-l.objetivo);} } } } } save(); currentSlide=0; renderAll(); if(autoEnabled) startAuto(); checkWin(); toast('Archivo cargado','ok'); } catch(err){ console.error(err); toast('Error al procesar el archivo','error'); } }
document.addEventListener('DOMContentLoaded', ()=>{ const dz=$('#dropzone'); dz.addEventListener('dragover',e=>{e.preventDefault(); dz.classList.add('bg-sky-50','border-sky-300');}); dz.addEventListener('dragleave',e=>{e.preventDefault(); dz.classList.remove('bg-sky-50','border-sky-300');}); dz.addEventListener('drop',e=>{e.preventDefault(); dz.classList.remove('bg-sky-50','border-sky-300'); const f=e.dataTransfer.files?.[0]; if(f) handleFile(f); }); const fi=$('#fileInput'); fi.addEventListener('change', e=>{ const f=e.target.files?.[0]; if(f) handleFile(f); }); document.addEventListener('keydown',e=>{ if(e.key==='ArrowRight'){ nextSlide(); if(autoEnabled){ clearInterval(autoTimer); startAuto(); } } else if(e.key==='ArrowLeft'){ prevSlide(); if(autoEnabled){ clearInterval(autoTimer); startAuto(); } } else if(e.key===' '){ e.preventDefault(); toggleAuto(); } else if(e.key==='Home'){ currentSlide=0; updateTransform(); adjustHeight(); syncGoto(); } else if(e.key==='End'){ if(cartillas.length){ currentSlide=cartillas.length-1; updateTransform(); adjustHeight(); syncGoto(); } } }); const wrap=$('#carouselWrap'); let startX=null,dx=0; wrap.addEventListener('pointerdown',e=>{ startX=e.clientX; dx=0; wrap.setPointerCapture(e.pointerId);}); wrap.addEventListener('pointermove',e=>{ if(startX!=null) dx=e.clientX-startX;}); wrap.addEventListener('pointerup',e=>{ if(startX!=null){ if(dx<-50) nextSlide(); else if(dx>50) prevSlide(); startX=null; dx=0; if(autoEnabled){ clearInterval(autoTimer); startAuto(); } } }); $('#prevBtn').addEventListener('click',()=>{ prevSlide(); if(autoEnabled){ clearInterval(autoTimer); startAuto(); } }); $('#nextBtn').addEventListener('click',()=>{ nextSlide(); if(autoEnabled){ clearInterval(autoTimer); startAuto(); } }); $('#playPause').addEventListener('click',toggleAuto); $('#speedSel').addEventListener('change',e=>{ autoMs=Number(e.target.value)||6000; if(autoEnabled){ clearInterval(autoTimer); startAuto(); } }); $('#gotoSel').addEventListener('change', e=>{ const i=Number(e.target.value); if(Number.isFinite(i)){ currentSlide=i; updateTransform(); adjustHeight(); syncGoto(); } }); load(); renderAll(); adjustHeight(); });
